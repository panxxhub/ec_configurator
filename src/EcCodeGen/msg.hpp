// Generated by EcGen at 2022-08-22 12:03:57
#pragma once

#define CMD_ENTER_STANDBY 0x01
#define CMD_ENTER_CYCLE   0x02

#define STATUS_INIT          0x00
#define STATUS_ENTER_STANDBY 0x01
#define STATUS_EXIT_STANDBY  0x02
#define STATUS_STANDBY       0x03
#define STATUS_CYCLE_RUN     0x04

#include <array>
#include <cstdint>

namespace icnc_rpc_controller {

#pragma pack(push, 1)

struct pdo_a2r_servo {
	uint16_t control_word;
	int32_t target_position;
	int32_t target_velocity;
	int8_t mode_of_operation;
};

struct pdo_a2r_io {
	uint8_t output[2];
};

using pdo_a2r_servo_grp = std::array<pdo_a2r_servo, 4>;

using pdo_a2r_io_grp = std::array<pdo_a2r_io, 1>;

struct pdo_a2r {
	pdo_a2r_servo_grp servo_grp;
	pdo_a2r_io_grp io_grp;
};


#define PKG_SIZE 9
struct a2r {
    uint16_t       domain_idx;
    uint16_t       pkg_num;
    uint16_t 	   control_word;
    struct pdo_a2r data[PKG_SIZE];
} __attribute__((aligned(0x20)));



struct pdo_r2a_servo {
	uint16_t status_word;
	int32_t position_actual_value;
	int32_t velocity_actual_value;
	int8_t mode_of_operation_display;
};

struct pdo_r2a_io {
	uint8_t input[2];
};

using pdo_r2a_servo_grp = std::array<pdo_r2a_servo, 4>;

using pdo_r2a_io_grp = std::array<pdo_r2a_io, 1>;

struct pdo_r2a {
	pdo_r2a_servo_grp servo_grp;
	pdo_r2a_io_grp io_grp;
};


struct r2a {
    uint16_t       buffer_len;
    uint16_t       domain_idx;
    uint32_t       cycle_count;
    uint16_t 	   status_word;
    struct pdo_r2a data;
} __attribute__((aligned(0x20)));

			

#pragma pack(pop)

}  // namespace icnc_rpc_controller